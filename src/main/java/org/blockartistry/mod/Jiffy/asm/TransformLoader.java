/*
 * This file is part of Jiffy, licensed under the MIT License (MIT).
 *
 * Copyright (c) OreCruncher
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.blockartistry.mod.Jiffy.asm;

import java.util.Map;

import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.relauncher.FMLLaunchHandler;
import cpw.mods.fml.relauncher.IFMLLoadingPlugin;
import cpw.mods.fml.relauncher.Side;

import com.google.common.eventbus.EventBus;

@IFMLLoadingPlugin.MCVersion("1.7.10")
@IFMLLoadingPlugin.TransformerExclusions({ "org.blockartistry.mod.Jiffy.asm.", "org.blockartistry.world.chunk.storage.",
		"org.blockartistry.world.storage." })
@IFMLLoadingPlugin.SortingIndex(10001)
@IFMLLoadingPlugin.Name("Jiffy")
public class TransformLoader implements IFMLLoadingPlugin {

	public static boolean runtimeDeobEnabled = false;

	@Override
	public String[] getASMTransformerClass() {
		return new String[] { Transformer.class.getName() };
	}

	@Override
	public String getAccessTransformerClass() {
		return null;
	}

	@Override
	public String getModContainerClass() {
		if (FMLLaunchHandler.side() == Side.CLIENT)
			return JiffyDummyContainer.class.getName();
		return null;
	}

	@Override
	public String getSetupClass() {
		return null;
	}

	@Override
	public void injectData(final Map<String, Object> map) {

		final Object v = map.get("runtimeDeobfuscationEnabled");
		if (v != null) {
			runtimeDeobEnabled = ((Boolean) v).booleanValue();
		}
	}

	public static class JiffyDummyContainer extends DummyModContainer {

		public JiffyDummyContainer() {
			super(new ModMetadata());
			final ModMetadata md = getMetadata();
			md.autogenerated = true;
			md.modId = "jiffy";
			md.name = md.description = "Jiffy";
			md.version = "@VERSION@";
		}

		@Override
		public boolean registerBus(final EventBus bus, final LoadController controller) {
			bus.register(this);
			return true;
		}
	}
}
